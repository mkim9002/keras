# 와인라벨
from tensorflow.python.keras.models import Sequential, Model, load_model
from tensorflow.python.keras.layers import Dense, Input,Dropout
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score, mean_squared_error
from sklearn.metrics import accuracy_score
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler, StandardScaler
from sklearn.preprocessing import MaxAbsScaler, RobustScaler
from sklearn.preprocessing import OneHotEncoder
from tensorflow.python.keras.callbacks import EarlyStopping


#1. 데이터
# 1.1 경로, 가져오기
path = './_data/wine_quality/'   #점 하나 현재폴더의밑에 점하나는 스터디

path_save = './_save/wine_quality/' 

train_csv = pd.read_csv(path + 'train.csv', index_col=0) 

test_csv = pd.read_csv(path + 'test.csv', index_col=0) 



# 1.2 확인 사항 5가지
print(train_csv.shape, test_csv.shape) #(5497, 13) (1000, 12)
#print(train_csv.columns, test_csv.columns)
#print(train_csv.info(), test_csv.info())
#print(train_csv.describe(), test_csv.describe())
#print(type(train_csv), type(test_csv))


# 1.3 결측치 처리
# print(train_csv.isnull().sum()) # 결축지 없음


# 1.4 라벨링-라벨 인코딩
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
le.fit(train_csv['type'])
aaa= le.transform(train_csv['type'])
print(aaa) #(5497, 13) (1000, 12)
print(type(aaa))
print(aaa.shape)
print(np.unique(aaa, return_counts=True))

train_csv['type']=aaa
print(train_csv)
test_csv['type']=le.transform(test_csv['type'])
print(le.transform(['red', 'white']))
print(le.transform(['white','red']))
print(type(aaa))
print(aaa.shape)

# 1.5 x, y 분리
x = train_csv.drop(['quality','type'],axis=1)
y = train_csv['quality']
test_csv = test_csv.drop(['type'], axis=1)
print(x.shape)
print(y.shape)
print(test_csv)

#1.6 원핫인코딩
print(np.unique(y))
print(type(y))
y=pd.get_dummies(y)
print(y)
y = np.array(y)
print(type(y))
print(y)

# 1.7 train, test 분리
x_train,x_test, y_train, y_test = train_test_split(x,y,shuffle=True, 
                                train_size=0.7, random_state=123,stratify=y)

# 1.8 Scaler
scaler =RobustScaler()
scaler.fit(x_train)
x_train = scaler.transform(x_train)
x_test = scaler.transform(x_test)
test_csv = scaler.transform(test_csv)

#2. 모델 구성
input1 = Input(shape=(11,))
dense1 = Dense(128, activation = 'relu')(input1)
dense2 = Dense(64, activation = 'relu')(dense1)
drop1 = Dropout(0.15)(dense2)
dense3 = Dense(32, activation = 'relu')(drop1)
dense4 = Dense(16, activation = 'relu')(dense3)
dense5 = Dense(8, activation = 'relu')(dense4)
drop2 = Dropout(0.15)(dense5)
output1 = Dense(7, activation = 'softmax')(drop2)
model = Model(inputs=input1, outputs=output1)

#3. 컴파일 훈련
model.compile(loss='categorocal_crossentropy',optimizer='adam',
              metrics=['acc'])



