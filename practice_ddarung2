import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score, mean_absolute_error
import pandas as pd

#1. 데이터
path = './keras/_data_ddarung/'
train_csv = pd.read_csv(path + 'train.csv', index_col=0)
print(train_csv)

test_csv = pd.read_csv(path + 'test.csv', index_col=0)

print(test_csv)
print(test_csv.shape)
print(train_csv.shape)
print(train_csv.columns)

#2. 모델구성
print(type(train_csv))

#결축지
train_csv = train_csv.dropna()

x = train_csv.drop(['count'], axis=1)
print(x)
y = train_csv['count']
print(y)


x_train, x_test, y_train, y_test = train_test_split(
    x,y, shuffle=0.7, random_state=777
)

model = Sequential()
model.add(Dense(81,input_dim=9))
model.add(Dense(63))
model.add(Dense(63))
model.add(Dense(63))
model.add(Dense(1))


#3. 컴파일, 훈련

model.compile(loss='mse', optimizer= 'adam')
model.fit(x_train, y_train, epochs =10, batch_size = 128, verbose=1)

#4. 평가, 예측
loss = model.evaluate(x_test, y_test)
print('loss:', loss)

y_predict = model.predict(x_test)

r2 = r2_score(y_test, y_predict)
print('r2 스코어', r2)

def RMSE(y_tet, y_predict):
    return np.sqrt(mean_squared_error(y_test, y_predict))
rmse = RMSE(y_test, y_predict)
print( 'RMSE :', rmse)

#summision.csv
print(test_csv.isnull(), sum())
y_submit = model.predict(test_csv)
print(y_submit)

submission = pd.read_csv( path + 'submission.csv', index_col=0)
print(submission)

submission['count'] = y_submit
print(submission)

submission.to_csv (path + 'submoit_34345.csv')





